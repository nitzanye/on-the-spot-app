// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//After Every change being here - run :
// npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// model Account {
//   id                String  @id @default(auto()) @map("_id") @db.ObjectId
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.String
//   access_token      String? @db.String
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.String
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  // emailVerified DateTime?
  name     String?
  imageUrl String?
  //  accounts      Account[]
  // sessions      Session[]
  // tickets  Ticket[]
}

// model VerificationToken {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model Ticket {
//   id       String @id @default(auto()) @map("_id") @db.ObjectId
//   // title     String
//   location String
//   artist   String
//   genre    String
//   amount   Int
//   price    Int
//   // content   String?
//   // published Boolean @default(false)
//   user     User   @relation(fields: [userId], references: [id])
//   userId   String @db.ObjectId
// }
